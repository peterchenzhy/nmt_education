<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.nmt.education.service.course.registeration.summary.RegisterationSummaryPoMapper">
    <resultMap id="BaseResultMap" type="com.nmt.education.pojo.po.RegisterationSummaryPo">
        <!--@mbg.generated-->
        <!--@Table registeration_summary-->
        <id column="id" jdbcType="BIGINT" property="id"/>
        <result column="student_id" jdbcType="BIGINT" property="studentId"/>
        <result column="course_id" jdbcType="BIGINT" property="courseId"/>
        <result column="course_schedule_id" jdbcType="BIGINT" property="courseScheduleId"/>
        <result column="course_registration_id" jdbcType="BIGINT" property="courseRegistrationId"/>
        <result column="sign_in" jdbcType="TINYINT" property="signIn"/>
        <result column="sign_in_remark" jdbcType="VARCHAR" property="signInRemark"/>
        <result column="status" jdbcType="TINYINT" property="status"/>
        <result column="creator" jdbcType="INTEGER" property="creator"/>
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
        <result column="operator" jdbcType="INTEGER" property="operator"/>
        <result column="operate_time" jdbcType="TIMESTAMP" property="operateTime"/>
    </resultMap>

    <sql id="Base_Column_List">
        <!--@mbg.generated-->
        id, student_id, course_id, course_schedule_id, course_registration_id, sign_in, `status`,
        creator, create_time, `operator`, operate_time,sign_in_remark
    </sql>
    <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
        <!--@mbg.generated-->
        select
        <include refid="Base_Column_List"/>
        from registeration_summary
        where id = #{id,jdbcType=BIGINT}
    </select>
    <select id="queryByCourseId" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from registeration_summary
        where status = 1 and course_id = #{courseId}
        <if test="signList != null and signList.size() != 0">
            and sign_in in
            <foreach collection="signList" item="sign" open="(" close=")" separator=",">
                #{sign}
            </foreach>
        </if>
    </select>
    <select id="queryByRegisterId" parameterType="java.lang.Long" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from registeration_summary
        where status = 1
        and course_registration_id =#{registerId}
    </select>
    <select id="queryByRegisterIds"  resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from registeration_summary
        where status = 1
        and course_registration_id in
        <foreach collection="ids" item="id" open="(" close=")" separator=",">
            #{id}
        </foreach>
    </select>
    <select id="queryByCourseScheduleId" parameterType="java.lang.Long" resultType="com.nmt.education.pojo.vo.CourseSignInItem">
    select
    rs.id as registerSummaryId , rs.student_id as studentId, s.name as studentName,rs.sign_in as signIn
        ,rs.course_id as courseId,rs.course_schedule_id as  courseScheduleId
    from registeration_summary rs
    inner join student s on rs.student_id = s.id
    where rs.status = 1
    and rs.course_schedule_id =#{courseScheduleId}
    and rs.sign_in != 3
  </select>

    <update id="signIn">
        <foreach collection="list" item="e" separator=";">
            update registeration_summary set operate_time = now() ,operator=#{operator} ,sign_in=#{e.signIn},sign_in_remark=#{e.signInRemark}
            where id = #{e.registerSummaryId}
        </foreach>
    </update>

    <update id="updateSignIn">
        update registeration_summary set operate_time = now() ,operator=#{logInUser} ,sign_in=#{code}
        ,sign_in_remark=#{remark}
        where id in
        <foreach collection="ids" item="id" open="(" close=")" separator=",">
            #{id}
        </foreach>
    </update>

    <select id="selectByIds" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from registeration_summary
        where status = 1
        and id in
        <foreach collection="ids" item="id" separator="," open="(" close=")">
            #{id}
        </foreach>
    </select>
    <select id="queryBySearchDto" parameterType="com.nmt.education.pojo.dto.req.RegisterSummarySearchDto"
            resultType="com.nmt.education.pojo.vo.RegisterSummaryVo">
        <!--@mbg.generated-->
        select
        rs.id as id , rs.student_id as studentId, rs.course_id as courseId , rs.course_schedule_id as courseScheduleId,
        rs.course_registration_id as courseRegistrationId, rs.sign_in as signIn, rs.status as status ,
        rs.creator as creator, rs.create_time as createTime, rs.operator as operator, rs.operate_time as operateTime
        ,c.name as courseName,s.name as studentName , rs.create_time as registerTime,cr.registration_number as registrationNumber
        ,cr.balance_amount as balanceAmount ,cr.total_amount as totalAmount,cr.registration_status as registrationStatus
        ,cr.registration_type as registrationType,cr.fee_status as feeStatus,cr.registration_number as registrationNumber,
        c.campus as campus,c.course_subject as courseSubject,c.grade as grade,cs.course_datetime as courseDatetime,
        c.season as season
        from registeration_summary rs
        inner join course c on c.id= rs.course_id
        inner join course_registration cr on cr.id=rs.course_registration_id
        inner join student s on rs.student_id = s.id
        inner join course_schedule cs on rs.course_schedule_id = cs.id
        where rs.status = 1
        <if test="dto.signIn != null">
            and rs.sign_in = #{dto.signIn}
        </if>
        <if test="dto.registerStartDate != null">
            <![CDATA[
      and rs.create_time >= #{dto.registerStartDate} ]]>
        </if>
        <if test="dto.registerEndDate != null">
            <![CDATA[
      and rs.create_time <= #{dto.registerEndDate}  ]]>
        </if>
<!--        <if test="dto.grade != null">-->
<!--            and c.grade = #{dto.grade}-->
<!--        </if>-->
        <if test="gradeList != null and gradeList.size() != 0">
            and c.grade in
            <foreach collection="gradeList" item="grade" separator="," open="(" close=")">
                #{grade}
            </foreach>
        </if>
        <if test="dto.courseSubject != null">
            and c.course_subject = #{dto.courseSubject}
        </if>
        <if test="dto.courseType != null">
            and c.course_type = #{dto.courseType}
        </if>
        <if test="dto.startDate != null">
            <![CDATA[
      and cs.course_datetime >= #{dto.startDate} ]]>
        </if>
        <if test="dto.endDate != null">
            <![CDATA[
      and cs.course_datetime <= #{dto.endDate}  ]]>
        </if>
        <if test="campusList != null and campusList.size() != 0">
            and c.campus in
            <foreach collection="campusList" item="campus" separator="," open="(" close=")">
                #{campus}
            </foreach>
        </if>
        <if test="dto.season != null">
            and c.season = #{dto.season}
        </if>
        <if test="dto.year !=null" >
            and c.year = #{dto.year}
        </if>
        order by rs.id desc

    </select>

    <select id="queryCountBySearchDto" resultType="java.lang.Integer">
        <!--@mbg.generated-->
        select count(*)
        from registeration_summary rs
        inner join course c on c.id= rs.course_id
        inner join course_registration cr on cr.id=rs.course_registration_id
        inner join student s on rs.student_id = s.id
        inner join course_schedule cs on rs.course_schedule_id = cs.id
        where rs.status = 1
        <if test="signInStatus != null">
            and rs.sign_in = #{signInStatus}
        </if>
<!--        <if test="dto.signIn != null">-->
<!--            and rs.sign_in = #{dto.signIn}-->
<!--        </if>-->
        <if test="dto.registerStartDate != null">
            <![CDATA[
      and rs.create_time >= #{dto.registerStartDate} ]]>
        </if>
        <if test="dto.registerEndDate != null">
            <![CDATA[
      and rs.create_time <= #{dto.registerEndDate}  ]]>
        </if>
<!--        <if test="dto.grade != null">-->
<!--            and c.grade = #{dto.grade}-->
<!--        </if>-->
        <if test="dto.courseSubject != null">
            and c.course_subject = #{dto.courseSubject}
        </if>
        <if test="dto.courseType != null">
            and c.course_type = #{dto.courseType}
        </if>
        <if test="dto.startDate != null">
            <![CDATA[
      and cs.course_datetime >= #{dto.startDate} ]]>
        </if>
        <if test="dto.endDate != null">
            <![CDATA[
      and cs.course_datetime <= #{dto.endDate}  ]]>
        </if>
        <if test="campusList != null and campusList.size() != 0">
            and c.campus in
            <foreach collection="campusList" item="campus" separator="," open="(" close=")">
                #{campus}
            </foreach>
        </if>
        <if test="gradeList != null and gradeList.size() != 0">
            and c.grade in
            <foreach collection="gradeList" item="grade" separator="," open="(" close=")">
                #{grade}
            </foreach>
        </if>
        <if test="dto.season != null">
            and c.season = #{dto.season}
        </if>
        <if test="dto.year !=null" >
            and c.year = #{dto.year}
        </if>

    </select>
    <insert id="insertSelective" keyColumn="id" keyProperty="id" parameterType="com.nmt.education.pojo.po.RegisterationSummaryPo"
            useGeneratedKeys="true">
        <!--@mbg.generated-->
        insert into registeration_summary
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="studentId != null">
                student_id,
            </if>
            <if test="courseId != null">
                course_id,
            </if>
            <if test="courseScheduleId != null">
                course_schedule_id,
            </if>
            <if test="courseRegistrationId != null">
                course_registration_id,
            </if>
            <if test="signIn != null">
                sign_in,
            </if>
            <if test="status != null">
                `status`,
            </if>
            <if test="creator != null">
                creator,
            </if>
            <if test="createTime != null">
                create_time,
            </if>
            <if test="operator != null">
                `operator`,
            </if>
            <if test="operateTime != null">
                operate_time,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="studentId != null">
                #{studentId,jdbcType=BIGINT},
            </if>
            <if test="courseId != null">
                #{courseId,jdbcType=BIGINT},
            </if>
            <if test="courseScheduleId != null">
                #{courseScheduleId,jdbcType=BIGINT},
            </if>
            <if test="courseRegistrationId != null">
                #{courseRegistrationId,jdbcType=BIGINT},
            </if>
            <if test="signIn != null">
                #{signIn,jdbcType=TINYINT},
            </if>
            <if test="status != null">
                #{status,jdbcType=TINYINT},
            </if>
            <if test="creator != null">
                #{creator,jdbcType=INTEGER},
            </if>
            <if test="createTime != null">
                #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="operator != null">
                #{operator,jdbcType=INTEGER},
            </if>
            <if test="operateTime != null">
                #{operateTime,jdbcType=TIMESTAMP},
            </if>
        </trim>
    </insert>
    <update id="updateByPrimaryKeySelective" parameterType="com.nmt.education.pojo.po.RegisterationSummaryPo">
        <!--@mbg.generated-->
        update registeration_summary
        <set>
            <if test="studentId != null">
                student_id = #{studentId,jdbcType=BIGINT},
            </if>
            <if test="courseId != null">
                course_id = #{courseId,jdbcType=BIGINT},
            </if>
            <if test="courseScheduleId != null">
                course_schedule_id = #{courseScheduleId,jdbcType=BIGINT},
            </if>
            <if test="courseRegistrationId != null">
                course_registration_id = #{courseRegistrationId,jdbcType=BIGINT},
            </if>
            <if test="signIn != null">
                sign_in = #{signIn,jdbcType=TINYINT},
            </if>
            <if test="status != null">
                `status` = #{status,jdbcType=TINYINT},
            </if>
            <if test="creator != null">
                creator = #{creator,jdbcType=INTEGER},
            </if>
            <if test="createTime != null">
                create_time = #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="operator != null">
                `operator` = #{operator,jdbcType=INTEGER},
            </if>
            <if test="operateTime != null">
                operate_time = #{operateTime,jdbcType=TIMESTAMP},
            </if>
        </set>
        where id = #{id,jdbcType=BIGINT}
    </update>
    <insert id="batchInsert" keyColumn="id" keyProperty="id" parameterType="map" useGeneratedKeys="true">
        <!--@mbg.generated-->
        insert into registeration_summary
        (student_id, course_id, course_schedule_id, course_registration_id, sign_in, `status`,
        creator, create_time, `operator`, operate_time)
        values
        <foreach collection="list" item="item" separator=",">
            (#{item.studentId,jdbcType=BIGINT}, #{item.courseId,jdbcType=BIGINT}, #{item.courseScheduleId,jdbcType=BIGINT},
            #{item.courseRegistrationId,jdbcType=BIGINT}, #{item.signIn,jdbcType=TINYINT},
            #{item.status,jdbcType=TINYINT}, #{item.creator,jdbcType=INTEGER}, #{item.createTime,jdbcType=TIMESTAMP},
            #{item.operator,jdbcType=INTEGER}, #{item.operateTime,jdbcType=TIMESTAMP})
        </foreach>
    </insert>

    <select id="checkSignIn" resultType="java.lang.Integer">
        select count(*) from registeration_summary where status =  1
        and course_schedule_id = #{courseScheduleId} and sign_in = 1
    </select>

    <select id="countRegistration" resultType="java.lang.Long">
        <!--@mbg.generated-->
        select count(*)
        from
        (
        select rs.course_id,rs.student_id
        from registeration_summary rs
        inner join course c on c.id= rs.course_id
        inner join course_registration cr on cr.id=rs.course_registration_id
        inner join student s on rs.student_id = s.id
        inner join course_schedule cs on rs.course_schedule_id = cs.id
        where rs.status = 1 and rs.sign_in = 1
        <if test="dto.registerStartDate != null">
            <![CDATA[
      and rs.create_time >= #{dto.registerStartDate} ]]>
        </if>
        <if test="dto.registerEndDate != null">
            <![CDATA[
      and rs.create_time <= #{dto.registerEndDate}  ]]>
        </if>
        <if test="dto.grade != null">
            and c.grade = #{dto.grade}
        </if>
        <if test="dto.courseSubject != null">
            and c.course_subject = #{dto.courseSubject}
        </if>
        <if test="dto.courseType != null">
            and c.course_type = #{dto.courseType}
        </if>
        <if test="dto.startDate != null">
            <![CDATA[
      and cs.course_datetime >= #{dto.startDate} ]]>
        </if>
        <if test="dto.endDate != null">
            <![CDATA[
      and cs.course_datetime <= #{dto.endDate}  ]]>
        </if>
        <if test="campusList != null and campusList.size() != 0">
            and c.campus in
            <foreach collection="campusList" item="campus" separator="," open="(" close=")">
                #{campus}
            </foreach>
        </if>
        <if test="dto.season != null">
            and c.season = #{dto.season}
        </if>
        <if test="dto.year !=null">
            and c.year = #{dto.year}
        </if>
        group by rs.course_id,rs.student_id
        having count(*)>=3
        ) as temp

    </select>
</mapper>